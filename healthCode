import random
import numpy as np
import pandas as pd
import networkx as nx
from scipy.spatial.distance import euclidean
import matplotlib.pyplot as plt

#Builds a graph
g = nx.Graph() 

#Reads the CSV file
data = pd.read_csv("country-wise-average.csv")

#check for any null values
#print(data.isnull().sum())

#only focusing on the country along with the income, overweight, underweight and stunting problem 
new_dat = data[["Country","Income Classification", "Overweight","Stunting", "Underweight"]].dropna()

#check for null values in the new data 
#print(new_dat.isnull().sum())

#iterate through the table and add the nodes respectively by its country
for i, r in new_dat.iterrows():
    g.add_node(r["Country"],income=r["Income Classification"],overweight=r["Overweight"],stunt=r["Stunting"],underweight=r["Underweight"])

for  i, r in new_dat.iterrows():
  for k, r2 in new_dat.iterrows():
     if i != k:
            health_dis = euclidean(
                [r["Overweight"], r["Stunting"], r["Underweight"]],
                [r2["Overweight"], r2["Stunting"], r2["Underweight"]])
            g.add_edge(r["Country"], r2["Country"], weight=1 / (1 + health_dis))  

centrality_degree = nx.degree_centrality(g)
for u in centrality_degree:
    print(u, centrality_degree[u])
    break

#top_c = 20
#for u in sorted(centrality_degree, key= centrality_degree.get, reverse=True)[:top_c]:
    #print(u, g.nodes[u]['Country'], centrality_degree[u])

plt.figure(figsize=(12, 8))
pos = nx.spring_layout(g, seed=42)
nx.draw(g, pos, with_labels=True, node_color="pink", edge_color="gray", node_size=300, font_size=8)
plt.title("Country Health Similarity Network")
plt.show()  
